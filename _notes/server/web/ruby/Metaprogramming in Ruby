Metaprogramming in Ruby
=====

1. commands:

* Array.ancestors
* Array.instance_methods(false) # option is to set if include inherited methods
* Array.methods(false)
* Module.nesting
* Module#constants # show all the constants in current namespace
* Module.constants # Module.constants returns all the top-level constants in the current program, including class names

2. Module including:

 When you include a module in a class (or even in another module), Ruby inserts the module in the ancestors chain, right above the including class itself.

 * prepend method

3. private rule

first, you need an explicit receiver to call a method on an object that is not yourself, and second, private methods can be called only with an implicit receiver. Put these two rules together, and you’ll see that you can only call a private method on yourself. You can call this the “private rule.”

4. rspec test post with params and headers

`post '/api/v2/signup', headers: headers, params: params.to_json`

5. variables

* instance variables exist in instance
* class variables exist in class and passed to subclasses
* class instance variables exist in singleton class and cannot be inheried

* instance methods exist in class instance of that instance
* class methods exist in singleton class and cannot be inherited
